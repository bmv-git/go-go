/*
1. Определите структуру данных для представления задачи. Включите в неё поля, такие как
Title, Description, Status, Priority. Ключом для хранения будет ID.

2. Создайте HTTP сервер с использованием Gin. Настройте его для прослушивания
определенного порта (например, 8080).

3. Создайте эндпоинты для:
Создания новой задачи (POST запрос).
Получения списка всех задач (GET запрос).
Обновления информации о задаче (PUT запрос).
Удаления задачи по её идентификатору (DELETE запрос).

4. Реализуйте возможность фильтрации задач по статусу, приоритету
5. Добавьте обработку ошибок и верните соответствующие HTTP статусы при некорректных запросах.
6. Сделайте проверку что обязательные поля присутствуют в запросе и имеют непустые значения
(Title  string `json:"title" binding:"required"`)

7. Предоставить информацию клиенту о возможности кеширования данных на некоторое время
(1,2,3 часа). c.Header("Cache-Control", "public, max-age=3600")

8. Сделать эндпоинт на сохранения карты в json файл. И чтение данных и заполнения
карты из файла при старте/по запросу.

9. Реализуйте пагинацию для большого списка задач, возвращая только 10 из них
и общее количество задач
*/
package main
